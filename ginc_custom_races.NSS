// ginc_custom_races
/*
	Description: Holds constants for the Dasaria2 custom races 
*/
// RW 19-10-2010
//******CONSTANTS



//SUBRACES - obsolete
const int	RACIAL_SUBTYPE_HUMAN_D		=	67;
const int	RACIAL_SUBTYPE_HUMAN_VO		=	68;
const int	RACIAL_SUBTYPE_HUMAN_VN		=	69;
const int	RACIAL_SUBTYPE_HUMAN_VDA	=	70;
const int	RACIAL_SUBTYPE_HUMAN_VDU	=	71;
const int	RACIAL_SUBTYPE_HUMAN_VR		=	72;
const int	RACIAL_SUBTYPE_HUMAN_VI		=	73;
const int	RACIAL_SUBTYPE_HUMAN_C		=	74;
const int	RACIAL_SUBTYPE_HUMAN_T		=	75;
const int	RACIAL_SUBTYPE_HUMAN_F		=	76;

//SUBRACES
const int RACIAL_SUBTYPE_HUMAN_VANILLA 	=	17; //Vanilla humans

const int	RACIAL_SUBTYPE_DWARF_F		=	77;
const int	RACIAL_SUBTYPE_DWARF_S		=	78;
const int	RACIAL_SUBTYPE_DWARF_R		=	79;
const int	RACIAL_SUBTYPE_ELF_R		=	80;
const int	RACIAL_SUBTYPE_ELF_I		=	81;
const int	RACIAL_SUBTYPE_ELF_T		=	82;
const int	RACIAL_SUBTYPE_GNOME_D		=	83;
const int	RACIAL_SUBTYPE_GNOME_F		=	84;
const int	RACIAL_SUBTYPE_HALFLING_F	=	85;
const int	RACIAL_SUBTYPE_HALFLING_B	=	86;
const int	RACIAL_SUBTYPE_HALFELF_R	=	87;
const int	RACIAL_SUBTYPE_HALFELF_I	=	88;
const int	RACIAL_SUBTYPE_HALFORC_D	=	89;
const int	RACIAL_SUBTYPE_HALFORC_K	=	90;
const int	RACIAL_SUBTYPE_HALFORC_V	=	91;
const int	RACIAL_SUBTYPE_HALFORC_T	=	92;
const int	RACIAL_SUBTYPE_PT_BARAAN	=	93;
const int	RACIAL_SUBTYPE_PT_REL		=	94;
const int	RACIAL_SUBTYPE_PT_COLOTH	=	95;
const int	RACIAL_SUBTYPE_PT_NUARARI	=	96;
const int	RACIAL_SUBTYPE_PT_INEANIA	=	97;
const int	RACIAL_SUBTYPE_PT_TESHALIA	=	98;
const int	RACIAL_SUBTYPE_PT_CHTAIA	=	99;
const int	RACIAL_SUBTYPE_PT_EXO		=	100;

//HUMAN DESCRIPTION STRREFS
const int HRTG_HUM_DASARIAN_STRREF = 16777261;
const int HRTG_HUM_OLDV_STRREF = 16777264;
const int HRTG_HUM_NEWV_STRREF = 16777267;
const int HRTG_HUM_DARS_STRREF = 16777270;
const int HRTG_HUM_DUSERIC_STRREF = 16777273;
const int HRTG_HUM_REL_STRREF = 16777276;
const int HRTG_HUM_IRYROD_STRREF = 16777279;
const int HRTG_HUM_CUHANNA_STRREF = 16777282;
const int HRTG_HUM_TAHNAI_STRREF = 16777285;
const int HRTG_HUM_NULL_STRREF = 16777288;

//Racial Feats

//HRTG - obsolete
const int HRTG_HUM_DASARIAN = 2955;
const int HRTG_HUM_OLDV = 2956;
const int HRTG_HUM_NEWV = 2957;
const int HRTG_HUM_DARS = 2958;
const int HRTG_HUM_DUSERIC = 2959;
const int HRTG_HUM_REL = 2960;
const int HRTG_HUM_IRYROD = 2961;
const int HRTG_HUM_CUHANNA = 2962;
const int HRTG_HUM_TAHNAI = 2963;
const int HRTG_HUM_NULL = 2964;
//HIST 
const int HIST_HUM_DASARIAN = 3062;
const int HIST_HUM_OLDV = 3063;
const int HIST_HUM_NEWV = 3064;
const int HIST_HUM_DARS = 3065;
const int HIST_HUM_DUSERIC = 3066;
const int HIST_HUM_REL = 3067;
const int HIST_HUM_IRYROD = 3068;
const int HIST_HUM_CUHANNA = 3069;
const int HIST_HUM_TAHNAI = 3070;
const int HIST_HUM_NULL = 3071;






const int HRTG_DWF_FREE = 2965;
const int HRTG_DWF_STRONG = 2966;

const int HRTG_ELF_RIAN = 2967;
const int HRTG_ELF_IRYROD = 2968;

const int HRTG_GNOME = 2970;

const int HRTG_HALFLING = 2971;

const int HRTG_HELF_RIAN = 2972;
const int HRTG_HELF_IRYROD = 2973;

const int HRTG_HORC_DASARIAN = 2974;
const int HRTG_HORC_KOR = 2975;
const int HRTG_HORC_VOKK = 2976;
const int HRTG_HORC_TAHNAI = 2977;

const int HRTG_PT_REL = 2979;
const int HRTG_PT_COLOTH = 2980;
const int HRTG_PT_NUARARI = 2981;
const int HRTG_PT_INEANIA = 2982;
const int HRTG_PT_TESHALIA = 2983;
const int HRTG_PT_CHTAIA = 2984;
const int HRTG_PT_EXODON = 2985;

//ITELGOTHRIM
const int HRTG_ELF_ITELGOTHRIM = 2969;
const int HRTG_BOUND_TO_SARATAURE = 3057;
const int FEAT_HIST_UNBOUND_TO_SARATAURE = 3060;
const int FEAT_RACIAL_LIGHT	= 1750;
const int FEAT_RACIAL_SEE_INVIS =	1749;





//BARAANMAN
const int HRTG_PT_BARAAN = 2978;
const int HRTG_BAR_ANCIENTINSIGHT = 2986;
const int HRTG_PT_BAR_ANCIENTWISDOM = 2987;
const int HRTG_PT_BAR_WORDUNVEILING = 2990;
const int HRTG_PT_BAR_ANCIENTKINDRED = 2988;
const int HRTG_PT_BAR_WORDTHARON = 2989;




//Racial Feat Spell IDs

//ITELGOTHRIM
const int SPELLID_HRTG_BOUND_TO_SARATAURE = 1874;
const int SPELLID_FEAT_HIST_UNBOUND_TO_SARATAURE = 1877;

//BARAANMAN
const int SPELLID_HRTG_BAR_ANCIENTINSIGHT = 1810;
const int SPELLID_HRTG_PT_BAR_ANCIENTWISDOM = 1811;
const int SPELLID_HRTG_PT_BAR_WORDUNVEILING = 1814;
const int SPELLID_HRTG_PT_BAR_WORDTHARON = 1813;
const int SPELLID_HRTG_PT_BAR_ANCIENTKINDRED = 1812;



//XML
const string  HUMAN_GUINAME = "Dasaria2HumanGUI";
const string  HUMAN_XMLNAME = "dasaria2_humans.xml";






//*****DECLEARATIONS

int iReturnHumanSubRace(object oPC);


int iCountHertitageFeats(object oPC);

void ResetHertitageFeatUses(object oPC);

void MarkHertiageFeatsAsRested(object oPC);

//

//*****FUNCTIONS

int iHumanSubRaceSelected(object oPC)
{
	int iTest = FALSE;

	if(GetHasFeat( HIST_HUM_DASARIAN ,oPC) || GetHasFeat( HIST_HUM_OLDV ,oPC) || GetHasFeat( HIST_HUM_NEWV ,oPC) || GetHasFeat( HIST_HUM_DARS ,oPC) || GetHasFeat( HIST_HUM_DUSERIC ,oPC) || GetHasFeat( HIST_HUM_REL ,oPC) || GetHasFeat( HIST_HUM_IRYROD ,oPC) || GetHasFeat( HIST_HUM_CUHANNA ,oPC) || GetHasFeat( HIST_HUM_TAHNAI ,oPC) || GetHasFeat( HIST_HUM_NULL ,oPC))
	{iTest = TRUE;}

	return iTest;
}


string sHumanDescription(string sInput2)
{
	string sDescription;
	int iResRef;
	int iInput = StringToInt(sInput2);
	switch(iInput)
	{
		case 1:
			iResRef = HRTG_HUM_DASARIAN_STRREF;
		break;
		case 2:
			iResRef = HRTG_HUM_OLDV_STRREF;
		break;
		case 3:
			iResRef = HRTG_HUM_NEWV_STRREF;		
		break;
		case 4:
			iResRef = HRTG_HUM_DARS_STRREF;		
		break;
		case 5:
			iResRef = HRTG_HUM_DUSERIC_STRREF;		
		break;
		case 6:
			iResRef = HRTG_HUM_REL_STRREF;		
		break;
		case 7:
			iResRef = HRTG_HUM_IRYROD_STRREF;		
		break;
		case 8:
			iResRef = HRTG_HUM_CUHANNA_STRREF;		
		break;
		case 9:
			iResRef = HRTG_HUM_TAHNAI_STRREF;		
		break;
		default:
			iResRef = HRTG_HUM_NULL_STRREF;		
		break;
	}

	sDescription = GetStringByStrRef(iResRef);
	//sDescription = IntToString(iResRef);		
	return sDescription;

}

/*
Because of limitations of the subrace system it is not possible to create working human subraces.
Therefore we are moving to use background feats (heritage feats would be preferred, but would invalidate characters)
This is a cheaty function to avoid extensive rewriting of existing functions
*/
int iReturnHumanSubRace(object oPC)
{
	int iSubRace = GetSubRace(oPC);
	if (iSubRace == RACIAL_SUBTYPE_HUMAN_VANILLA)
	{
		if(GetHasFeat(HIST_HUM_DASARIAN, oPC)) iSubRace = RACIAL_SUBTYPE_HUMAN_D;
		if(GetHasFeat(HIST_HUM_OLDV, oPC)) iSubRace = RACIAL_SUBTYPE_HUMAN_VO;
		if(GetHasFeat(HIST_HUM_NEWV, oPC)) iSubRace = RACIAL_SUBTYPE_HUMAN_VN;
		if(GetHasFeat(HIST_HUM_DARS, oPC)) iSubRace = RACIAL_SUBTYPE_HUMAN_VDA;
		if(GetHasFeat(HIST_HUM_DUSERIC, oPC)) iSubRace = RACIAL_SUBTYPE_HUMAN_VDU;
		if(GetHasFeat(HIST_HUM_REL, oPC)) iSubRace = RACIAL_SUBTYPE_HUMAN_VR;
		if(GetHasFeat(HIST_HUM_IRYROD, oPC)) iSubRace = RACIAL_SUBTYPE_HUMAN_VI;
		if(GetHasFeat(HIST_HUM_CUHANNA, oPC)) iSubRace = RACIAL_SUBTYPE_HUMAN_C;
		if(GetHasFeat(HIST_HUM_TAHNAI, oPC)) iSubRace = RACIAL_SUBTYPE_HUMAN_T;
		if(GetHasFeat(HIST_HUM_NULL, oPC)) iSubRace = RACIAL_SUBTYPE_HUMAN_F;		
	}
		
	return iSubRace;
}

void SetHumanHeritage(object oPC, string sInput2)
{

	int iInput2 = StringToInt(sInput2);

	if(!iHumanSubRaceSelected(oPC))
	{
		switch(iInput2)
		{
			case 1:
				FeatAdd(oPC,HIST_HUM_DASARIAN,FALSE,FALSE,FALSE);
				
			break;
			case 2:
				FeatAdd(oPC,HIST_HUM_OLDV,FALSE,FALSE,FALSE);		
			break;
			case 3:
				FeatAdd(oPC,HIST_HUM_NEWV,FALSE,FALSE,FALSE);
			break;
			case 4:
				FeatAdd(oPC,HIST_HUM_DARS,FALSE,FALSE,FALSE);
			break;
			case 5:
				FeatAdd(oPC,HIST_HUM_DUSERIC,FALSE,FALSE,FALSE);		
			break;
			case 6:
				FeatAdd(oPC,HIST_HUM_REL,FALSE,FALSE,FALSE);		
			break;
			case 7:
				FeatAdd(oPC,HIST_HUM_IRYROD,FALSE,FALSE,FALSE);		
			break;
			case 8:
				FeatAdd(oPC,HIST_HUM_CUHANNA,FALSE,FALSE,FALSE);		
			break;
			case 9:
				FeatAdd(oPC,HIST_HUM_TAHNAI,FALSE,FALSE,FALSE);		
			break;
			case 10:
				FeatAdd(oPC,HIST_HUM_NULL,FALSE,FALSE,FALSE);		
			break;
			default:
				FeatAdd(oPC,HIST_HUM_DASARIAN,FALSE,FALSE,FALSE);
			break;
		}
	}
}


void OpenHumanGUI(object oPC)
{
	if(GetSubRace(oPC) !=  RACIAL_SUBTYPE_HUMAN_VANILLA) 
	{
		CloseGUIScreen(oPC, HUMAN_GUINAME );
		SendMessageToPC(oPC, "<color=Purple>Invalid Race</color>");
		return;
	}
	if(iHumanSubRaceSelected(oPC))
	{	
		SendMessageToPC(oPC, "<color=Purple>Heritage already selected</color>");
		return;
	}
	DisplayGuiScreen(oPC, HUMAN_GUINAME ,0, HUMAN_XMLNAME);
	SetGUIObjectDisabled(oPC, HUMAN_GUINAME, "SELECT_RACE", TRUE);
}

//Count the number of hertiage feats of a PC, used for custom heritage feats where more feats
//equals more power
// 
int iCountHertitageFeats(object oPC)
{

	int iNoOfHeritageFeats =  0;
	int iSubRace = iReturnHumanSubRace(oPC);

	
		
	if(iSubRace >= 67)
	{
		switch(iSubRace)
		{
			case RACIAL_SUBTYPE_HUMAN_D:
			
											
			break;
			
			case RACIAL_SUBTYPE_HUMAN_VO:
			break;
			case RACIAL_SUBTYPE_HUMAN_VN:
			break;
			case RACIAL_SUBTYPE_HUMAN_VDA:
			break;
			case RACIAL_SUBTYPE_HUMAN_VDU:
			break;
			case RACIAL_SUBTYPE_HUMAN_VR:
			break;
			case RACIAL_SUBTYPE_HUMAN_VI:
			break;
			case RACIAL_SUBTYPE_HUMAN_C:
			break;
			case RACIAL_SUBTYPE_HUMAN_T:
			break;
			case RACIAL_SUBTYPE_HUMAN_F:
			break;
			case RACIAL_SUBTYPE_DWARF_F:
			break;
			case RACIAL_SUBTYPE_DWARF_S:
			break;
			case RACIAL_SUBTYPE_DWARF_R:
			break;
			case RACIAL_SUBTYPE_ELF_R:
			break;
			case RACIAL_SUBTYPE_ELF_I:
			break;
			case RACIAL_SUBTYPE_ELF_T:
			break;
			case RACIAL_SUBTYPE_GNOME_D:
			break;
			case RACIAL_SUBTYPE_GNOME_F:
			break;
			case RACIAL_SUBTYPE_HALFLING_F:
			break;
			case RACIAL_SUBTYPE_HALFLING_B:
			break;
			case RACIAL_SUBTYPE_HALFELF_R:
			break;
			case RACIAL_SUBTYPE_HALFELF_I:
			break;
			case RACIAL_SUBTYPE_HALFORC_D:
			break;
			case RACIAL_SUBTYPE_HALFORC_K:
			break;
			case RACIAL_SUBTYPE_HALFORC_V:
			break;
			case RACIAL_SUBTYPE_HALFORC_T:
			break;
			
			case RACIAL_SUBTYPE_PT_BARAAN:

			
				if(GetHasFeat(HRTG_PT_BARAAN , oPC)) {iNoOfHeritageFeats = iNoOfHeritageFeats + 1;}
				if(GetHasFeat(HRTG_BAR_ANCIENTINSIGHT , oPC)) {iNoOfHeritageFeats = iNoOfHeritageFeats + 1;}
				if(GetHasFeat(HRTG_PT_BAR_ANCIENTWISDOM , oPC)) {iNoOfHeritageFeats = iNoOfHeritageFeats + 1;}
				if(GetHasFeat(HRTG_PT_BAR_WORDUNVEILING , oPC)) {iNoOfHeritageFeats = iNoOfHeritageFeats + 1;}			
				if(GetHasFeat(HRTG_PT_BAR_WORDTHARON , oPC)) {iNoOfHeritageFeats = iNoOfHeritageFeats + 1;}
				if(GetHasFeat(HRTG_PT_BAR_ANCIENTKINDRED , oPC)) {iNoOfHeritageFeats = iNoOfHeritageFeats + 1;}							
//				if(GetHasFeat( , oPC)) {iNoOfHeritageFeats = iNoOfHeritageFeats + 1;}
//				if(GetHasFeat( , oPC)) {iNoOfHeritageFeats = iNoOfHeritageFeats + 1;}
	
			break;
			
			case RACIAL_SUBTYPE_PT_REL:
			break;
			case RACIAL_SUBTYPE_PT_COLOTH:
			break;
			case RACIAL_SUBTYPE_PT_NUARARI:
			break;
			case RACIAL_SUBTYPE_PT_INEANIA:
			break;
			case RACIAL_SUBTYPE_PT_TESHALIA:
			break;
			case RACIAL_SUBTYPE_PT_CHTAIA:
			break;
			case RACIAL_SUBTYPE_PT_EXO:		
			break;
		}
	}
	return iNoOfHeritageFeats;
}




void ResetHertitageFeatUses(object oPC)
{

	int iNoOfHeritageFeats =  iCountHertitageFeats(oPC);
	int iSubRace = iReturnHumanSubRace(oPC);
	int iTargetUses= 0;
	int iCounter = 0;

	int iHertiageFeat1, iHertiageFeat2, iHertiageFeat3, iHertiageFeat4, iHertiageFeat5, iHertiageFeat6, iHertiageFeat7, iHertiageFeat8, iHertiageFeat9, iHertiageFeat10;

	
		
	
	if(iSubRace >= 67)
	{
		switch(iSubRace)
		{
			case RACIAL_SUBTYPE_HUMAN_D:
			break;
			case RACIAL_SUBTYPE_HUMAN_VO:
			break;
			case RACIAL_SUBTYPE_HUMAN_VN:
			break;
			case RACIAL_SUBTYPE_HUMAN_VDA:
			break;
			case RACIAL_SUBTYPE_HUMAN_VDU:
			break;
			case RACIAL_SUBTYPE_HUMAN_VR:
			break;
			case RACIAL_SUBTYPE_HUMAN_VI:
			break;
			case RACIAL_SUBTYPE_HUMAN_C:
			break;
			case RACIAL_SUBTYPE_HUMAN_T:
			break;
			case RACIAL_SUBTYPE_HUMAN_F:
			break;
			case RACIAL_SUBTYPE_DWARF_F:
			break;
			case RACIAL_SUBTYPE_DWARF_S:
			break;
			case RACIAL_SUBTYPE_DWARF_R:
			break;
			case RACIAL_SUBTYPE_ELF_R:
			break;
			case RACIAL_SUBTYPE_ELF_I:
			break;
			case RACIAL_SUBTYPE_ELF_T:
			break;
			case RACIAL_SUBTYPE_GNOME_D:
			break;
			case RACIAL_SUBTYPE_GNOME_F:
			break;
			case RACIAL_SUBTYPE_HALFLING_F:
			break;
			case RACIAL_SUBTYPE_HALFLING_B:
			break;
			case RACIAL_SUBTYPE_HALFELF_R:
			break;
			case RACIAL_SUBTYPE_HALFELF_I:
			break;
			case RACIAL_SUBTYPE_HALFORC_D:
			break;
			case RACIAL_SUBTYPE_HALFORC_K:
			break;
			case RACIAL_SUBTYPE_HALFORC_V:
			break;
			case RACIAL_SUBTYPE_HALFORC_T:
			break;
			case RACIAL_SUBTYPE_PT_BARAAN:
			
				if(GetHasFeat(HRTG_PT_BAR_ANCIENTWISDOM , oPC) && GetLocalInt(oPC, "iHertiageFeat1") == 0) 
				{
					iTargetUses = 1 + iNoOfHeritageFeats;
					for(iCounter=1;iCounter <= (6-iTargetUses);iCounter++)
					{
						DecrementRemainingFeatUses(oPC, HRTG_PT_BAR_ANCIENTWISDOM);
					}
					SetLocalInt(oPC, "iHertiageFeat1", 1); 
				}

				if(GetHasFeat(HRTG_PT_BAR_WORDUNVEILING , oPC) && GetLocalInt(oPC, "iHertiageFeat2") == 0) 
				{
					iTargetUses = 1 + iNoOfHeritageFeats;	
					for(iCounter=1;iCounter <= (6-iTargetUses);iCounter++)
					{
						DecrementRemainingFeatUses(oPC, HRTG_PT_BAR_WORDUNVEILING);
					}								
					SetLocalInt(oPC, "iHertiageFeat2", 1); 
				}				
				if(GetHasFeat(HRTG_PT_BAR_WORDTHARON , oPC) && GetLocalInt(oPC, "iHertiageFeat3") == 0) 
				{
					iTargetUses = iNoOfHeritageFeats;
					for(iCounter=1;iCounter <= (6-iTargetUses);iCounter++)
					{
						DecrementRemainingFeatUses(oPC, HRTG_PT_BAR_WORDTHARON);
					}									
					SetLocalInt(oPC, "iHertiageFeat3", 1); 
				}				
				if(GetHasFeat(HRTG_PT_BAR_ANCIENTKINDRED , oPC) && GetLocalInt(oPC, "iHertiageFeat4") == 0)
				{
					iTargetUses = iNoOfHeritageFeats;
					for(iCounter=1;iCounter <= (6-iTargetUses);iCounter++)
					{
						DecrementRemainingFeatUses(oPC, HRTG_PT_BAR_ANCIENTKINDRED);
					}									
					SetLocalInt(oPC, "iHertiageFeat4", 1); 
				}				 					
						
			break;
			case RACIAL_SUBTYPE_PT_REL:
			break;
			case RACIAL_SUBTYPE_PT_COLOTH:
			break;
			case RACIAL_SUBTYPE_PT_NUARARI:
			break;
			case RACIAL_SUBTYPE_PT_INEANIA:
			break;
			case RACIAL_SUBTYPE_PT_TESHALIA:
			break;
			case RACIAL_SUBTYPE_PT_CHTAIA:
			break;
			case RACIAL_SUBTYPE_PT_EXO:		
			break;
						
		}
	
	}

}


void MarkHertiageFeatsAsRested(object oPC)
{
	int iCounter = 0;
	string iHertiageFeat;
	
	for(iCounter = 1; iCounter<= 10; iCounter++)
	{
		iHertiageFeat = "iHertiageFeat"+IntToString(iCounter);	
		SetLocalInt(oPC,iHertiageFeat, 0); 
	}
}

//void main()